name: Build Release Binaries

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to upload binaries to (e.g. jito-bell-v0.1.0)'
        required: true
        type: string
      package_path:
        description: 'Path to the package'
        required: true
        default: 'jito-bell'
        type: string
      publish_release:
        description: 'Publish the release after uploading binaries'
        required: true
        default: true
        type: boolean

jobs:
  build-binaries:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
            name: x86_64-apple-darwin
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   name: x86_64-pc-windows-msvc
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: refs/tags/${{ github.event.inputs.release_tag }}
      
      # Setup Rust for all builds
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      # Install OpenSSL on macOS
      - name: Install OpenSSL (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
      
      # Use cache for builds
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: "jito-bell-${{ matrix.target }}-${{ inputs.package_path }}-v8"

      - name: Extract crate name and version
        id: crate_info
        shell: bash
        run: |
          CRATE_NAME=$(basename "${{ inputs.package_path }}")
          VERSION=$(grep -m1 'version =' ${{ inputs.package_path }}/Cargo.toml | cut -d '"' -f2)
          echo "crate_name=$CRATE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building $CRATE_NAME version $VERSION for ${{ matrix.target }}"
      
      # Use Docker for Linux MUSL build ONLY
      - name: Build Linux MUSL with Docker
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          # Run the build in Docker with muslrust
          docker run --rm -v $(pwd):/home/rust/src -w /home/rust/src clux/muslrust:stable cargo build --release --package ${{ inputs.package_path }}
          
          # List the target directory to debug the path
          echo "Listing target directories:"
          find ./target -name "${{ inputs.package_path }}" | grep -v debug

      # Standard build for Linux GNU ONLY
      - name: Build Linux GNU
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          cargo build --release --target ${{ matrix.target }} --package ${{ inputs.package_path }}
      
      # Regular build for macOS
      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --release --target ${{ matrix.target }} --package ${{ inputs.package_path }}
      
      # Install Protocol Buffers compiler for all platforms
      # - name: Install protoc
      #   uses: arduino/setup-protoc@v3
      #   with:
      #     version: "25.x"
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      # Regular build for Windows
      # - name: Build (Windows)
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     cargo build --release --target ${{ matrix.target }} --package ${{ inputs.package_path }}
      
      - name: Prepare binary
        shell: bash
        run: |
          CRATE_NAME="${{ steps.crate_info.outputs.crate_name }}"
          VERSION=$(grep -m1 'version =' ${{ inputs.package_path }}/Cargo.toml | cut -d '"' -f2)
          BINARY_NAME="${CRATE_NAME}-v${VERSION}-${{ matrix.target }}"
          
          echo "Building binary with new version: $VERSION"
          
          # Find the binary
          if [ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]; then
            # For Linux MUSL (built with Docker), find the binary
            BINARY_PATH=$(find ./target -name "$CRATE_NAME" -type f -executable | grep -v debug | head -n 1)
          elif [ "${{ matrix.target }}" == "x86_64-pc-windows-msvc" ]; then
            # For Windows, add .exe extension
            BINARY_PATH="./target/${{ matrix.target }}/release/${CRATE_NAME}.exe"
            BINARY_NAME="${BINARY_NAME}.exe"
          else
            # For Linux GNU and macOS, use the standard path
            BINARY_PATH="./target/${{ matrix.target }}/release/${CRATE_NAME}"
          fi
          
          echo "Found binary at: $BINARY_PATH"
          
          # Copy binary to root with appropriate name
          cp "$BINARY_PATH" "${BINARY_NAME}"
          
          # Create checksum
          if command -v shasum >/dev/null 2>&1; then
            shasum -a 256 "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          else
            # Use PowerShell on Windows if shasum is not available
            powershell -Command "Get-FileHash -Algorithm SHA256 '${BINARY_NAME}' | ForEach-Object { \$_.Hash.ToLower() + '  ${BINARY_NAME}' }" > "${BINARY_NAME}.sha256"
          fi
      
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ steps.crate_info.outputs.crate_name }}-v${{ steps.crate_info.outputs.version }}-${{ matrix.target }}*
          retention-days: 7

  publish-release:
    name: Publish Release
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_tag }}
      
      - name: Extract release information
        id: release_info
        shell: bash
        run: |
          CRATE_NAME="${{ inputs.package_path }}"
          VERSION=$(grep -m1 'version =' ${{ inputs.package_path }}/Cargo.toml | cut -d '"' -f2)
          echo "crate_name=$CRATE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create release directory
        run: mkdir -p release-binaries
      
      - name: Download Linux MUSL binary
        uses: actions/download-artifact@v4
        with:
          name: x86_64-unknown-linux-musl
          path: release-binaries

      - name: Download Linux GNU binary
        uses: actions/download-artifact@v4
        with:
          name: x86_64-unknown-linux-gnu
          path: release-binaries
      
      - name: Download macOS binary
        uses: actions/download-artifact@v4
        with:
          name: x86_64-apple-darwin
          path: release-binaries
      
      # - name: Download Windows binary
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: x86_64-pc-windows-msvc
      #     path: release-binaries
      
      - name: Generate release notes
        id: release_notes
        run: |
          echo "## Binaries" >> RELEASE_NOTES.md
          echo "- Linux musl (x86_64-unknown-linux-musl)" >> RELEASE_NOTES.md
          echo "- Linux GNU (x86_64-unknown-linux-gnu)" >> RELEASE_NOTES.md
          echo "- macOS (x86_64-apple-darwin)" >> RELEASE_NOTES.md
          # echo "- Windows (x86_64-pc-windows-msvc)" >> RELEASE_NOTES.md
          
          if [ -f "CHANGELOG.md" ]; then
            echo "" >> RELEASE_NOTES.md
            echo "## Changelog" >> RELEASE_NOTES.md
            # Extract the relevant section from CHANGELOG.md if it exists
            grep -A 50 "^## ${{ steps.release_info.outputs.version }}" CHANGELOG.md | grep -B 50 -m 2 "^## " | head -n -1 >> RELEASE_NOTES.md || true
          fi
      
      - name: Update release with binaries
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.event.inputs.release_tag }}
          name: "${{ steps.release_info.outputs.crate_name }} v${{ steps.release_info.outputs.version }}"
          bodyFile: "RELEASE_NOTES.md"
          artifacts: "./release-binaries/*"
          artifactErrorsFailBuild: false
          allowUpdates: true
          draft: ${{ github.event.inputs.publish_release != 'true' }}
          
      - name: Publish Release
        if: github.event.inputs.publish_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release edit "${{ github.event.inputs.release_tag }}" --draft=false